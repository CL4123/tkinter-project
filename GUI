# GUI module generated by PAGE version 7.5
# in conjunction with Tcl version 8.6

import seaborn as sns
import tkinter as tk
from tkinter import *
import webbrowser
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from tkinter import filedialog, messagebox
from tkinter import ttk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from pylab import mpl
# 设置中文显示字体
mpl.rcParams["font.sans-serif"] = ["SimHei"]
# 画图参数
pd.set_option('display.max_columns', 1000)
pd.set_option('display.width', 1000)
pd.set_option('display.max_colwidth', 1000)
pd.set_option('display.unicode.ambiguous_as_wide', True)
pd.set_option('display.unicode.east_asian_width', True)
# 窗口居中
def center_window(root, width, height):
    screenwidth = root.winfo_screenwidth()  # 获取显示屏宽度
    screenheight = root.winfo_screenheight()  # 获取显示屏高度
    size = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2.5, (screenheight - height) / 2.5)  # 设置窗口居中参数
    root.geometry(size)  # 让窗口居中显示
def select_path():
    path_ = filedialog.askopenfilename(title='选择文件',filetypes=[('Excel 文件', '*.xls;*.xlsx'), ('Excel 文件', '*.xlsx'),('Excel 97-2003文件', '*.xls')])
    if path_ != "":
        file_path.set(path_)
# 显示数据
def show_table():
    try:
        t = pd.read_excel(file_path.get())
        t.to_html('output.html')
        webbrowser.open('output.html')
    except Exception as e:
        messagebox.showerror('错误',f'文件路径选择错误，请检查路径')
# 跳转函数
def inmainpage():
    global flag
    flag=1
# 跳转函数
def inmainpage2():
    global flag
    flag=2
# 防止路径错误点击主页面
def show_error(top):
    try:
        t = pd.read_excel(file_path.get())
        top.destroy()
        inmainpage()
    except Exception as e:
        messagebox.showerror('错误',f'文件路径选择错误，请检查路径')
# 清除数据
def delButton(tree):
    # 删除数据
    x = tree.get_children()
    for item in x:
        tree.delete(item)
# 清洗数据
def rewrite(raw_data,tree):
    raw_data.drop(raw_data[np.isnan(raw_data['时间(s)'])].index,inplace=True)
    for count in range(1, len(raw_data)):
        val = raw_data.iloc[count]
        val_new = []
        for item in val:
            val_new.append(round(item, 2))
        tree.insert('', 'end', values=val_new)
    tree.place(relx=0.05,rely=0.05,relwidth=0.4,relheight=0.35)
# 绘图函数
def draw(var,x_data,y_data,root):
    if var.get()=='时间-位移图':
        figure=Figure(figsize=(5,4),dpi=150)
        subplot=figure.add_subplot(1,1,1)
        subplot.plot(x_data,y_data)
        canvas=FigureCanvasTkAgg(figure, master=root)
        canvas.draw()
        widget = canvas.get_tk_widget()
        widget.place(relx=0.5, rely=0.05, relheight=0.5, relwidth=0.4)
        # 坐标range，图题，坐标轴题目
    if var.get()=='箱型图':
        make_boxplot(raw_data,inputs,root)
# 箱型图绘图
def make_boxplot(welldata, inputs,root):
    num_inputs = len(inputs)
    fig, axs = plt.subplots(1, num_inputs, figsize=(5, 4))
    for i, (ax, curve) in enumerate(zip(axs.flat, inputs), 1):
        sns.boxplot(y=welldata[curve], ax=ax, color='cornflowerblue', showmeans=True,
                    meanprops={"marker": "o",
                               "markerfacecolor": "white",
                               "markeredgecolor": "black",
                               "markersize": "10"},
                    flierprops={'marker': 'o',
                                'markerfacecolor': 'darkgreen',
                                'markeredgecolor': 'darkgreen'})

        ax.set_title(inputs[i - 1],fontsize=8)
        ax.set_ylabel('')

    plt.subplots_adjust(hspace=0.15, wspace=1.25)
    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas.draw()
    widget = canvas.get_tk_widget()
    widget.place(relx=0.5, rely=0.05, relheight=0.5, relwidth=0.4)
    # plt.show()
def renewdraw(x_data,y_data):
    x_data=raw_data['时间(s)']
    y_data=raw_data['相对位移(mm)']



# 主界面
top=tk.Tk()
center_window(top,600,450)
top.minsize(152, 1)
top.maxsize(1080, 720)
top.title("岩性识别v2.0")
top.configure(background="#d9d9d9")
# 默认路径
file_path = tk.StringVar()
file_path.set("") #添加默认文件路径
#判断条件
global flag
flag=0
# 选择文件路径
Button1 = tk.Button(top)
Button1.place(relx=0.733, rely=0.111, height=33, width=83)
Button1.configure(command=select_path)
Button1.configure(activebackground="beige")
Button1.configure(activeforeground="black")
Button1.configure(background="#d9d9d9")
Button1.configure(compound='left')
Button1.configure(disabledforeground="#a3a3a3")
Button1.configure(foreground="#000000")
Button1.configure(highlightbackground="#d9d9d9")
Button1.configure(highlightcolor="black")
Button1.configure(pady="0")
Button1.configure(text='''浏览路径''')
# 选择路径的文本框
Entry1 = tk.Entry(top)
Entry1.place(relx=0.283, rely=0.111, height=31, relwidth=0.407)
Entry1.configure(textvariable=file_path)
Entry1.configure(background="white")
Entry1.configure(disabledforeground="#a3a3a3")
Entry1.configure(font="TkFixedFont")
Entry1.configure(foreground="#000000")
Entry1.configure(insertbackground="black")
# 预览数据按钮
Button2 = tk.Button(top)
Button2.place(relx=0.283, rely=0.244, height=33, width=113)
Button2.configure(command=show_table)
Button2.configure(activebackground="beige")
Button2.configure(activeforeground="black")
Button2.configure(background="#d9d9d9")
Button2.configure(compound='left')
Button2.configure(disabledforeground="#a3a3a3")
Button2.configure(foreground="#000000")
Button2.configure(highlightbackground="#d9d9d9")
Button2.configure(highlightcolor="black")
Button2.configure(pady="0")
Button2.configure(text='''预览数据''')
# 进行岩性识别并跳转下个界面
Button3 = tk.Button(top)
Button3.place(relx=0.6, rely=0.244, height=33, width=113)
Button3.configure(command=lambda:[show_error(top)])
Button3.configure(activebackground="beige")
Button3.configure(activeforeground="black")
Button3.configure(background="#d9d9d9")
Button3.configure(compound='left')
Button3.configure(disabledforeground="#a3a3a3")
Button3.configure(foreground="#000000")
Button3.configure(highlightbackground="#d9d9d9")
Button3.configure(highlightcolor="black")
Button3.configure(pady="0")
Button3.configure(text='''进入主页面''')
# 窗口循环
top.mainloop()

# 处理显示数据
raw_data=pd.read_excel(file_path.get()) #看情况加skipfooter
# print(raw_data.columns)
try:
    raw_data=raw_data.drop(columns=['相对时间','位移(mm)','扭矩计算值（N.m）','马达进油压(MPa)','马达回油压(MPa)','推进油缸进油(MPa)','推进油缸回油(MPa)'])
except:
    print('')
# 判断栏的长度
col=['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15']
if len(col)>len(raw_data.columns):
    count=len(col)-len(raw_data.columns)
    while count!=0:
        col.pop()
        count-=1
# print(raw_data)
# 画图用数据
# 时间位移图
x_data = raw_data['时间(s)']
y_data = raw_data['相对位移(mm)']
# 箱型图
inputs = list(raw_data.columns)
inputs.pop(0) # remove the well name from the columns list


# 判断跳转条件
if flag==1:
    mainpage=tk.Tk()
    center_window(mainpage,1500,800)
    mainpage.minsize(152, 1)
    mainpage.maxsize(1920, 1080)
    mainpage.title("岩性识别")
    mainpage.configure(background="#d9d9d9")
    # 信息栏
    tree = ttk.Treeview(mainpage, columns=col, show='headings')
    for item in range(0, len(raw_data.columns)):
        tree.column(col[item], width=200, anchor='center')
        tree.heading(col[item], text=raw_data.columns[item])
    # 多选栏1
    var1 = StringVar()
    combobox_mainpage1=ttk.Combobox(mainpage,textvariable=var1)
    combobox_mainpage1['value']=('箱型图','时间-位移图')
    combobox_mainpage1.current(0)
    combobox_mainpage1.place(relx=0.63,rely=0.57,height=35,width=80)
    # 根据选项绘图
    Button_mainpage1 = tk.Button(mainpage)
    Button_mainpage1.place(relx=0.7, rely=0.57, height=35, width=125)
    Button_mainpage1.configure(command=lambda:[draw(var1,x_data,y_data,mainpage)]) #一个按钮执行两个函数
    Button_mainpage1.configure(activebackground="beige")
    Button_mainpage1.configure(activeforeground="black")
    Button_mainpage1.configure(background="#d9d9d9")
    Button_mainpage1.configure(compound='left')
    Button_mainpage1.configure(disabledforeground="#a3a3a3")
    Button_mainpage1.configure(foreground="#000000")
    Button_mainpage1.configure(highlightbackground="#d9d9d9")
    Button_mainpage1.configure(highlightcolor="black")
    Button_mainpage1.configure(pady="0")
    Button_mainpage1.configure(text='''绘图''')
    # 退出程序
    Button_mainpage2 = tk.Button(mainpage)
    Button_mainpage2.place(relx=0.88, rely=0.9, height=35, width=125)
    Button_mainpage2.configure(command=lambda: mainpage.destroy())
    Button_mainpage2.configure(activebackground="beige")
    Button_mainpage2.configure(activeforeground="black")
    Button_mainpage2.configure(background="#d9d9d9")
    Button_mainpage2.configure(compound='left')
    Button_mainpage2.configure(disabledforeground="#a3a3a3")
    Button_mainpage2.configure(foreground="#000000")
    Button_mainpage2.configure(highlightbackground="#d9d9d9")
    Button_mainpage2.configure(highlightcolor="black")
    Button_mainpage2.configure(pady="0")
    Button_mainpage2.configure(text='''退出程序''')
    # 清除异常数据
    Button_mainpage3 = tk.Button(mainpage)
    Button_mainpage3.place(relx=0.2, rely=0.43, height=35, width=125)
    Button_mainpage3.configure(command=lambda: [delButton(tree),rewrite(raw_data,tree),renewdraw(x_data,y_data)])
    Button_mainpage3.configure(activebackground="beige")
    Button_mainpage3.configure(activeforeground="black")
    Button_mainpage3.configure(background="#d9d9d9")
    Button_mainpage3.configure(compound='left')
    Button_mainpage3.configure(disabledforeground="#a3a3a3")
    Button_mainpage3.configure(foreground="#000000")
    Button_mainpage3.configure(highlightbackground="#d9d9d9")
    Button_mainpage3.configure(highlightcolor="black")
    Button_mainpage3.configure(pady="0")
    Button_mainpage3.configure(text='''数据清洗''')
    # 绘图模块
    # 创建空白画布
    canvas = tk.Canvas(mainpage, bg='white')
    canvas.place(relx=0.5, rely=0.05, relheight=0.5, relwidth=0.4)
    # 时间——位移图

    # 显示文本
    # text1=Label(font=('宋体',10,'bold'),text='前十行数据如下所示',bg='white',relief='raised')
    # text1.place(x=650,y=0,height=19)
    # 插入数据
    for count in range(0, len(raw_data)):
        val = raw_data.iloc[count]
        val_new = []
        for item in val:
            val_new.append(round(item, 2))
        tree.insert('', 'end', values=val_new)
    # tree.pack(fill=tk.BOTH, expand=True) # 另一种写法
    tree.place(relx=0.05,rely=0.05,relwidth=0.4,relheight=0.35)
    vscroll=Scrollbar(mainpage,orient='vertical',command=tree.yview)
    vscroll.place(relx=0.45,rely=0.05,relwidth=0.015,relheight=0.35)
    tree.configure(yscrollcommand=vscroll.set)
    hscroll=Scrollbar(mainpage,orient='horizontal',command=tree.xview)
    hscroll.place(relx=0.05,rely=0.4,relwidth=0.4,relheight=0.015)
    tree.configure(xscrollcommand=hscroll.set)


    mainpage.mainloop()
